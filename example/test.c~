/*
    Copyright (c) 2014
    vurtun <polygone@gmx.net>
    MIT license
*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include "cson_lex.h"

/*
 *==============================================================
 *
 *                          UTIL
 *
 *==============================================================
 */
static int str_cmp(struct cson_string *s, const char *str)
{
    assert(s && str && "invalid argument");
    if (!s || !str)
        return 1;

    size_t i;
    size_t len = s->len;
    for (i = 0; i < len; i++, str++) {
        if (s->str[i] != *str)
            return 1;
    }
    return 0;
}

/*
static char *str_dup(struct cson_str *s, void*(*alloc)(size_t))
{
    assert(s & alloc && "invalid argument");
    if (!s || !alloc)
        return NULL;

    char *str = alloc(s->len + 1);
    if (!str)
        return NULL;

    memcpy(str, s->str, s->len);
    str[s->len] = '\0';
    return str;
}

static int str_cpy(char *dst, size_t max, struct cson_str *s)
{
    assert(dst & max && s);
    if (!dst || !max || !s)
        return -1;

    int result;
    size_t *siz;
    if (max <= (s->len + 1)) {
        result = max;
        max--;
        siz = max;
    } else {
        result = s->len;
        siz = s->len;
    }

    memcpy(dst, s->str, *siz);
    dst[*siz] = '\0';
    return result;
}
*/
/*
 *==============================================================
 *
 *                          VALUE
 *
 *==============================================================
 */
static void test_value_str(void)
{
    const char *buf = "{\"value\"}";
    size_t size = strlen(buf);

    struct cson_iter iter = cson_begin(buf, size);
    assert(!cson_err(&iter));

    struct cson_token tok;
    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_VALUE);
    assert(tok.type == CSON_STR);
    assert(!str_cmp(&tok.value, "value"));

    iter = cson_read(&iter, &tok);
    assert(cson_eof(&iter));
}

static void test_value_num(void)
{
    const char *buf = "{1234}";
    size_t size = strlen(buf);

    struct cson_iter iter = cson_begin(buf, size);
    assert(!cson_err(&iter));

    struct cson_token tok;
    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_VALUE);
    assert(tok.type == CSON_NUM);
    assert(!str_cmp(&tok.value, "1234"));

    iter = cson_read(&iter, &tok);
    assert(tok.attr == CSON_EOF);
    assert(cson_eof(&iter));
}

static void test_value_spec(void)
{
    const char *buf = "{true, false, null}";
    size_t size = strlen(buf);

    struct cson_iter iter = cson_begin(buf, size);
    assert(!cson_eof(&iter));

    struct cson_token tok;
    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_VALUE);
    assert(tok.type == CSON_TRUE);
    assert(!str_cmp(&tok.value, "true"));

    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_VALUE);
    assert(tok.type == CSON_FALSE);
    assert(!str_cmp(&tok.value, "false"));

    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_VALUE);
    assert(tok.type == CSON_NULL);
    assert(!str_cmp(&tok.value, "null"));

    iter = cson_read(&iter, &tok);
    assert(tok.attr == CSON_EOF);
    assert(cson_eof(&iter));
}

static void test_value_array(void)
{
    const char *buf = "{\"value\",22,952590}";
    size_t size = strlen(buf);

    struct cson_iter iter = cson_begin(buf, size);
    assert(!cson_eof(&iter));

    struct cson_token tok;
    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_VALUE);
    assert(tok.type == CSON_STR);
    assert(!str_cmp(&tok.value, "value"));

    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_VALUE);
    assert(tok.type == CSON_NUM);
    assert(!str_cmp(&tok.value, "22"));

    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_VALUE);
    assert(tok.type == CSON_NUM);
    assert(!str_cmp(&tok.value, "952590"));

    iter = cson_read(&iter, &tok);
    assert(tok.attr == CSON_EOF);
    assert(cson_eof(&iter));
}

static void test_value_sub(void)
{
    const char *buf = "{1, {2}}";
    size_t size = strlen(buf);

    struct cson_iter iter = cson_begin(buf, size);
    assert(!cson_eof(&iter));

    struct cson_token tok;
    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_VALUE);
    assert(tok.type == CSON_NUM);
    assert(!str_cmp(&tok.value, "1"));

    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_VALUE);
    assert(tok.type == CSON_TABLE);

    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_VALUE);
    assert(tok.type == CSON_NUM);
    assert(!str_cmp(&tok.value, "2"));

    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_END);
    assert(tok.type == CSON_TABLE);

    iter = cson_read(&iter, &tok);
    assert(tok.attr == CSON_EOF);
    assert(cson_eof(&iter));
}

/*
 *==============================================================
 *
 *                          PAIRS
 *
 *==============================================================
 */
static void test_pair_str(void)
{
    const char *buf = "{name=\"value\"}";
    size_t size = strlen(buf);

    struct cson_iter iter = cson_begin(buf, size);
    assert(!cson_eof(&iter));

    struct cson_token tok;
    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_PAIR);
    assert(tok.type == CSON_STR);
    assert(!str_cmp(&tok.name, "name"));
    assert(!str_cmp(&tok.value, "value"));

    iter = cson_read(&iter, &tok);
    assert(tok.attr == CSON_EOF);
    assert(cson_eof(&iter));
}

static void test_pair_num(void)
{
    const char *buf = "{name=1234}";
    size_t size = strlen(buf);

    struct cson_iter iter = cson_begin(buf, size);
    assert(!cson_eof(&iter));

    struct cson_token tok;
    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_PAIR);
    assert(tok.type == CSON_NUM);
    assert(!str_cmp(&tok.name, "name"));
    assert(!str_cmp(&tok.value, "1234"));

    iter = cson_read(&iter, &tok);
    assert(tok.attr == CSON_EOF);
    assert(cson_eof(&iter));
}

static void test_pair_spec(void)
{
    const char *buf = "{open=true, alive=false, next=null}";
    size_t size = strlen(buf);

    struct cson_iter iter = cson_begin(buf, size);
    assert(!cson_eof(&iter));

    struct cson_token tok;
    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_PAIR);
    assert(tok.type == CSON_TRUE);
    assert(!str_cmp(&tok.name, "open"));
    assert(!str_cmp(&tok.value, "true"));

    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_PAIR);
    assert(tok.type == CSON_FALSE);
    assert(!str_cmp(&tok.name, "alive"));
    assert(!str_cmp(&tok.value, "false"));

    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_PAIR);
    assert(tok.type == CSON_NULL);
    assert(!str_cmp(&tok.name, "next"));
    assert(!str_cmp(&tok.value, "null"));

    iter = cson_read(&iter, &tok);
    assert(tok.attr == CSON_EOF);
    assert(cson_eof(&iter));
}

static void test_pair_array(void)
{
    const char *buf = "{name=\"value\",age=22,id=952590}";
    size_t size = strlen(buf);

    struct cson_iter iter = cson_begin(buf, size);
    assert(!cson_eof(&iter));

    struct cson_token tok;
    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_PAIR);
    assert(tok.type == CSON_STR);
    assert(!str_cmp(&tok.name, "name"));
    assert(!str_cmp(&tok.value, "value"));

    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_PAIR);
    assert(tok.type == CSON_NUM);
    assert(!str_cmp(&tok.name, "age"));
    assert(!str_cmp(&tok.value, "22"));

    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_PAIR);
    assert(tok.type == CSON_NUM);
    assert(!str_cmp(&tok.name, "id"));
    assert(!str_cmp(&tok.value, "952590"));

    iter = cson_read(&iter, &tok);
    assert(tok.attr == CSON_EOF);
    assert(cson_eof(&iter));
}

static void test_pair_sub(void)
{
    const char *buf = "{id=23, sub={members=2}, age=22}";
    size_t size = strlen(buf);

    struct cson_iter iter = cson_begin(buf, size);
    assert(!cson_eof(&iter));

    struct cson_token tok;
    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_PAIR);
    assert(tok.type == CSON_NUM);
    assert(!str_cmp(&tok.name, "id"));
    assert(!str_cmp(&tok.value, "23"));

    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(!str_cmp(&tok.name, "sub"));
    assert(tok.attr == CSON_PAIR);
    assert(tok.type == CSON_TABLE);

    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_PAIR);
    assert(tok.type == CSON_NUM);
    assert(!str_cmp(&tok.name, "members"));
    assert(!str_cmp(&tok.value, "2"));

    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_END);
    assert(tok.type == CSON_TABLE);

    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_PAIR);
    assert(tok.type == CSON_NUM);
    assert(!str_cmp(&tok.name, "age"));
    assert(!str_cmp(&tok.value, "22"));

    iter = cson_read(&iter, &tok);
    assert(tok.attr == CSON_EOF);
    assert(cson_eof(&iter));
}

/*
 *==============================================================
 *
 *                          MIXED
 *
 *==============================================================
 */
static void test_mixed_str(void)
{
    const char *buf = "{name=\"value\", \"test\", value=\"foo\"}";
    size_t size = strlen(buf);

    struct cson_iter iter = cson_begin(buf, size);
    assert(!cson_eof(&iter));

    struct cson_token tok;
    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_PAIR);
    assert(tok.type == CSON_STR);
    assert(!str_cmp(&tok.name, "name"));
    assert(!str_cmp(&tok.value, "value"));

    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_VALUE);
    assert(tok.type == CSON_STR);
    assert(!str_cmp(&tok.value, "test"));

    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_PAIR);
    assert(tok.type == CSON_STR);
    assert(!str_cmp(&tok.name, "value"));
    assert(!str_cmp(&tok.value, "foo"));

    iter = cson_read(&iter, &tok);
    assert(tok.attr == CSON_EOF);
    assert(cson_eof(&iter));
}

static void test_mixed_num(void)
{
    const char *buf = "{name=1234, 4321, id=952590}";
    size_t size = strlen(buf);

    struct cson_iter iter = cson_begin(buf, size);
    assert(!cson_eof(&iter));

    struct cson_token tok;
    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_PAIR);
    assert(tok.type == CSON_NUM);
    assert(!str_cmp(&tok.name, "name"));
    assert(!str_cmp(&tok.value, "1234"));

    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_VALUE);
    assert(tok.type == CSON_NUM);
    assert(!str_cmp(&tok.value, "4321"));

    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_PAIR);
    assert(tok.type == CSON_NUM);
    assert(!str_cmp(&tok.name, "id"));
    assert(!str_cmp(&tok.value, "952590"));

    iter = cson_read(&iter, &tok);
    assert(tok.attr == CSON_EOF);
    assert(cson_eof(&iter));
}

static void test_mixed_spec(void)
{
    const char *buf = "{true, alive=false, null}";
    size_t size = strlen(buf);

    struct cson_iter iter = cson_begin(buf, size);
    assert(!cson_eof(&iter));

    struct cson_token tok;
    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_VALUE);
    assert(tok.type == CSON_TRUE);
    assert(!str_cmp(&tok.value, "true"));

    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_PAIR);
    assert(tok.type == CSON_FALSE);
    assert(!str_cmp(&tok.name, "alive"));
    assert(!str_cmp(&tok.value, "false"));

    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_VALUE);
    assert(tok.type == CSON_NULL);
    assert(!str_cmp(&tok.value, "null"));

    iter = cson_read(&iter, &tok);
    assert(tok.attr == CSON_EOF);
    assert(cson_eof(&iter));
}

static void test_mixed_array(void)
{
    const char *buf = "{name=\"value\",22,id=952590}";
    size_t size = strlen(buf);

    struct cson_iter iter = cson_begin(buf, size);
    assert(!cson_eof(&iter));

    struct cson_token tok;
    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_PAIR);
    assert(tok.type == CSON_STR);
    assert(!str_cmp(&tok.name, "name"));
    assert(!str_cmp(&tok.value, "value"));

    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_VALUE);
    assert(tok.type == CSON_NUM);
    assert(!str_cmp(&tok.value, "22"));

    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_PAIR);
    assert(tok.type == CSON_NUM);
    assert(!str_cmp(&tok.name, "id"));
    assert(!str_cmp(&tok.value, "952590"));

    iter = cson_read(&iter, &tok);
    assert(tok.attr == CSON_EOF);
    assert(cson_eof(&iter));
}

static void test_mixed_sub(void)
{
    const char *buf = "{22,foo=\"bar\", sub={members=2, \"thingy\"}}";
    size_t size = strlen(buf);

    struct cson_iter iter = cson_begin(buf, size);
    assert(!cson_eof(&iter));

    struct cson_token tok;
    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_VALUE);
    assert(tok.type == CSON_NUM);
    assert(!str_cmp(&tok.value, "22"));

    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_PAIR);
    assert(tok.type == CSON_STR);
    assert(!str_cmp(&tok.name, "foo"));
    assert(!str_cmp(&tok.value, "bar"));

    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_PAIR);
    assert(tok.type == CSON_TABLE);
    assert(!str_cmp(&tok.name, "sub"));

    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_PAIR);
    assert(tok.type == CSON_NUM);
    assert(!str_cmp(&tok.name, "members"));
    assert(!str_cmp(&tok.value, "2"));

    iter = cson_read(&iter, &tok);
    assert(!cson_err(&iter));
    assert(tok.attr == CSON_VALUE);
    assert(tok.type == CSON_STR);
    assert(!str_cmp(&tok.value, "thingy"));

    iter = cson_read(&iter, &tok);
    assert(tok.attr == CSON_END);
    assert(tok.type == CSON_TABLE);

    iter = cson_read(&iter, &tok);
    assert(tok.attr == CSON_EOF);
    assert(cson_eof(&iter));
}

/*
 *==============================================================
 *
 *                          FAIL
 *
 *==============================================================
 */
static void test_fail_value_str(void)
{
    const char *val = "{value}";
    size_t size = strlen(val);

    struct cson_iter iter = cson_begin(val, size);
    assert(!cson_eof(&iter));

    struct cson_token tok;
    iter = cson_read(&iter, &tok);
    assert(cson_err(&iter) == CSON_ERROR_CHAR);
}

static void test_fail_pair_str(void)
{
    const char *buf = "{name=string}";
    size_t size = strlen(buf);

    struct cson_iter iter = cson_begin(buf, size);
    assert(!cson_eof(&iter));

    struct cson_token tok;
    iter = cson_read(&iter, &tok);
    assert(cson_err(&iter) == CSON_ERROR_CHAR);
}

static void test_fail_sep(void)
{
    const char *buf = "{name=\"string\" 123}";
    size_t size = strlen(buf);

    struct cson_iter iter = cson_begin(buf, size);
    assert(!cson_eof(&iter));

    struct cson_token tok;
    iter = cson_read(&iter, &tok);
    assert(cson_err(&iter) == CSON_ERROR_SEP);
}

static void test_fail_value_num(void)
{
    const char *buf = "{0124}";
    size_t size = strlen(buf);

    struct cson_iter iter = cson_begin(buf, size);
    assert(!cson_eof(&iter));

    struct cson_token tok;
    iter = cson_read(&iter, &tok);
    assert(cson_err(&iter) == CSON_ERROR_CHAR);
}

static void test_fail_pair_num(void)
{
    const char *buf = "{name=0124}";
    size_t size = strlen(buf);

    struct cson_iter iter = cson_begin(buf, size);
    assert(!cson_eof(&iter));

    struct cson_token tok;
    iter = cson_read(&iter, &tok);
    assert(cson_err(&iter) == CSON_ERROR_CHAR);
}

/*
 * -------------------------------------------------------------
 *==============================================================
 *
 *                          MAIN
 *
 *==============================================================
 *-------------------------------------------------------------
 */
static void test_values(void)
{
    test_value_str();
    test_value_num();
    test_value_spec();
    test_value_array();
    test_value_sub();
}

static void test_pairs(void)
{
    test_pair_str();
    test_pair_num();
    test_pair_spec();
    test_pair_array();
    test_pair_sub();
}

static void test_mixed(void)
{
    test_mixed_str();
    test_mixed_num();
    test_mixed_spec();
    test_mixed_array();
    test_mixed_sub();
}

static void test_fail(void)
{
    test_fail_value_str();
    test_fail_pair_str();
    test_fail_value_num();
    test_fail_pair_num();
    test_fail_sep();
}

int main(void)
{
    test_values();
    test_pairs();
    test_mixed();
    test_fail();
}

